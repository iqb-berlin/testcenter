# Base compose file defining services and their settings
# For concrete images check the environment specific override files.

x-restart-policy: &restart-policy
  restart: "${RESTART_POLICY:-always}"

x-env-redis: &env-redis
  REDIS_HOST: cache-server
  REDIS_PORT: 6379
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_CACHE_FILES: ${REDIS_CACHE_FILES:-false}

x-env-mysql: &env-mysql
  MYSQL_DATABASE: ${MYSQL_DATABASE}
  MYSQL_USER: ${MYSQL_USER}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD}

x-env-logging-conf: &env-logging-conf
  max-size: "200m"
  max-file: "10"

services:
  traefik:
    container_name: testcenter-traefik
    image: ${DOCKERHUB_PROXY}traefik:v3.4
    <<: *restart-policy
    ports:
      - "${HTTP_PORT:-80}:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      testcenter:

  testcenter-broadcasting-service:
    container_name: testcenter-broadcasting-service
    image: iqbberlin/testcenter-broadcasting-service:current
    <<: *restart-policy
    logging:
      options:
        <<: *env-logging-conf
    networks:
      testcenter:

  frontend:
    container_name: testcenter-frontend
    image: iqbberlin/testcenter-frontend:current
    <<: *restart-policy
    depends_on:
      backend:
        condition: service_healthy
    logging:
      options:
        <<: *env-logging-conf
    networks:
      testcenter:

  testcenter-file-service:
    container_name: testcenter-file-service
    image: iqbberlin/testcenter-file-service:current
    <<: *restart-policy
    depends_on:
      - cache-server
    environment:
      <<: *env-redis
    volumes_from:
      - backend:ro
    networks:
      testcenter:

  backend:
    container_name: testcenter-backend
    image: iqbberlin/testcenter-backend:current
    <<: *restart-policy
    depends_on:
      testcenter-db:
        condition: service_healthy
      cache-server:
        condition: service_started
    environment:
      HOSTNAME: ${HOSTNAME}
      PORT_OF_REVERSE_PROXY: ${HTTP_PORT:-80}
      TLS_PORT_OF_REVERSE_PROXY: ${HTTPS_PORT:-443}
      TLS_ENABLED: ${TLS_ENABLED:-true}
      BROADCAST_SERVICE_ENABLED: ${BROADCAST_SERVICE_ENABLED}
      FILE_SERVICE_ENABLED: ${FILE_SERVICE_ENABLED}
      <<: [ *env-redis, *env-mysql ]
      MYSQL_HOST: testcenter-db
      MYSQL_PORT: 3306
      PASSWORD_SALT: ${PASSWORD_SALT}
    logging:
      options:
        <<: *env-logging-conf
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://backend:8080" ]
      start_period: 60s
      start_interval: 3s
      interval: 5m
      timeout: 30s
      retries: 3
    volumes:
      - testcenter_backend_vo_data:/var/www/testcenter/data
    networks:
      testcenter:

  cache-server:
    container_name: testcenter-cache-service
    image: ${DOCKERHUB_PROXY}redis:8.0-bookworm
    <<: *restart-policy
    user: redis
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD}",
      "--maxmemory", "${REDIS_MEMORY_MAX:-1gb}",
      "--maxmemory-policy", "volatile-lru",
      "--save", '""',
      "--appendonly", "no"
    ]
    networks:
      testcenter:

  testcenter-db:
    container_name: testcenter-db
    image: ${DOCKERHUB_PROXY}mysql:8.4
    <<: *restart-policy
    environment:
      <<: *env-mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: 'true'
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "--user", "${MYSQL_USER}", "-h", "127.0.0.1", "--silent" ]
      start_period: 30s
      start_interval: 3s
      interval: 5m
      timeout: 30s
      retries: 3
    networks:
      testcenter:

volumes:
  dbdata:
  testcenter_backend_vo_data:

networks:
  testcenter:
    name: testcenter
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: ${DOCKER_DAEMON_MTU:-1500}
