load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

worker_processes auto; # The special value auto allows binding worker processes automatically to available CPUs
worker_cpu_affinity auto; # The optional mask parameter can be used to limit the CPUs available for automatic binding

env REDIS_HOST;
env REDIS_PORT;
env REDIS_CACHE_FILES;

events {
  # assuming 1 core for each worker process, setting worker_connections to 1024 implies that Nginx can serve 1024 clients/second.
  worker_connections 1024;
}

http {

  access_log /dev/null;
  error_log /dev/stdout;

  tcp_nodelay on; # default = on. off can: help improve network efficiency and reduce congestion, but can introduce some latency
  keepalive_timeout 65;

  server_name_in_redirect off;

  charset utf-8;
  source_charset utf-8;
  include mime.types;
  gzip on;
  gzip_types # list from https://github.com/h5bp/server-configs-nginx/blob/main/h5bp/web_performance/compression.conf#L38
    application/atom+xml
    application/geo+json
    application/javascript
    application/x-javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/vnd.ms-fontobject
    application/wasm
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/eot
    font/otf
    font/ttf
    image/bmp
    image/svg+xml
    image/vnd.microsoft.icon
    image/x-icon
    text/cache-manifest
    text/calendar
    text/css
    text/javascript
    text/markdown
    text/plain
    text/xml
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;

  resolver 127.0.0.11; # DNS resolver for the DNS cache; here hardcoded for docker setup. k8s uses another nginx config file

  lua_code_cache on;
  lua_shared_dict dns_cache 12k;
  lua_package_path "/usr/share/nginx/auth/?.lua;;";

  map $http_testmode $root {
    default /var/www/testcenter/data;
    integration /var/www/testcenter/data-TEST;
  }

  server {
    server_tokens off; # removes the nginx version at least (removing the server-header at all is very difficult)
    listen 80;
    listen [::]:80;

    location / {
      root $root;
      include /etc/nginx/conf.d/cors.conf; # must be overriden in e2e/headless-context and in future maybe others too
      internal; # forbids direct access to the files without token
    }

    location /file {
      set $file_path '';
      access_by_lua_file auth/auth.lua;
      content_by_lua_file auth/content.lua;
    }

    location /health {
      access_log off;
      add_header 'Content-Type' 'text/plain';
      return 200 "healthy\n";
    }

    error_page 404 /404;
    error_page 403 /403;
    error_page 500 /500;

    location = /404 {
        internal;
        return 404 'File-Service: File or Endpoint not found.';
    }

    location = /403 {
        internal;
        return 404 'File-Service: Forbidden.';
    }

    location = /500 {
        internal;
        return 404 'File-Service: Server Error.';
    }
  }
}
