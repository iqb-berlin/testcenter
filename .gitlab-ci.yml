include:
  - local: .gitlab-ci/*.gitlab-ci.yml
  #- template: Jobs/Dependency-Scanning.gitlab-ci.yml        # commits
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml # pull requests

gemnasium-dependency_scanning:
  rules:
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_TAG

image: ${DOCKER_HUB_PROXY}${BASE_IMAGE}

variables:
  REGISTRY: "$CI_REGISTRY"
  REGISTRY_USER: "$CI_REGISTRY_USER"
  REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"
  REGISTRY_PROJECT: "/${CI_PROJECT_PATH}/"
  DOCKER_HUB_PROXY: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/"
  BASE_IMAGE: docker:27.2
  #CICD_BASE_IMAGE: "${BASE_IMAGE}-git"
  #CYPRESS_IMAGE: cypress/browsers:node-20.17.0-chrome-128.0.6613.84-1-ff-129.0.2-edge-128.0.2739.42-1
  #CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"
  #E2E_BASE_IMAGE: "${CYPRESS_IMAGE}-docker"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DAEMON_OPTIONS: "--mtu=${DOCKER_SERVICE_MTU}"
  DOCKER_IMAGE: ${DOCKER_HUB_PROXY}docker:27.2
  DOCKER_SERVICE: ${DOCKER_HUB_PROXY}docker:27.2-dind
  DOCKER_SERVICE_MTU: 1442
  DOCKER_TLS_CERTDIR: ''
  TRIVY_IMAGE: ${DOCKER_HUB_PROXY}aquasec/trivy:latest

services:
  - name: ${DOCKER_SERVICE}
    entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
    alias: docker

stages:
  - build
  - test
  - deploy

.backend-change:
  rules:
    - changes:
        - backend/**/*
        - scripts/database/**/*
        - definitions/**/*

.frontend-change:
  rules:
    - changes:
        - frontend/**/*
        - common/**/*

.bs-change:
  rules:
    - changes:
        - broadcasting-service/**/*
        - common/**/*

.fs-change:
  rules:
    - changes:
        - scripts/file-service/**/*

build-backend:
  stage: build
  rules:
    - !reference [ .backend-change, rules ]
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"
    - if: "$CI_COMMIT_TAG"
    - changes:
        - e2e/**/*
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make
    - make init
    - make build service=testcenter-backend
    - docker push iqbberlin/testcenter-backend:dev

build-frontend:
  stage: build
  rules:
    - !reference [ .frontend-change, rules ]
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"
    - if: "$CI_COMMIT_TAG"
    - changes:
        - e2e/**/*
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make
    - make init
    - make build service=testcenter-frontend
    - docker push iqbberlin/testcenter-frontend:dev

build-broadcasting-service:
  stage: build
  rules:
    - !reference [ .bs-change, rules ]
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"
    - if: "$CI_COMMIT_TAG"
    - changes:
        - e2e/**/*
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make
    - make init
    - make build service=testcenter-broadcasting-service
    - docker push iqbberlin/testcenter-broadcasting-service:dev

build-file-service:
  stage: build
  rules:
    - !reference [ .fs-change, rules ]
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"
    - if: "$CI_COMMIT_TAG"
    - changes:
        - e2e/**/*
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make
    - make init
    - make build service=testcenter-file-service
    - docker push iqbberlin/testcenter-file-service

build-backend-prod:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_TAG"
  cache:
    paths:
      - .trivycache/
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make
    - make init
    - docker build --no-cache --target prod -t iqbberlin/testcenter-backend:$CI_COMMIT_TAG -f backend/Dockerfile .
    - |
      docker run --rm \
      -v /.trivycache/:/.trivycache/ -v /builds/iqb/testcenter/:/root/ -v /var/run/docker.sock:/var/run/docker.sock \
      ${TRIVY_IMAGE} image --exit-code 0 -q --timeout 20m --cache-dir .trivycache/ --security-checks vuln \
      --format template --template "@contrib/gitlab.tpl" -o /root/gl-container-scanning-report.json \
      iqbberlin/testcenter-backend:$CI_COMMIT_TAG
    - docker push iqbberlin/testcenter-backend:$CI_COMMIT_TAG
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

build-frontend-prod:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_TAG"
  cache:
    paths:
      - .trivycache/
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make curl
    - make init
    - docker build --no-cache --target prod -t iqbberlin/testcenter-frontend:$CI_COMMIT_TAG -f frontend/Dockerfile .
    - |
      docker run --rm \
      -v /.trivycache/:/.trivycache/ -v /builds/iqb/testcenter/:/root/ -v /var/run/docker.sock:/var/run/docker.sock \
      ${TRIVY_IMAGE} image --exit-code 0 -q --timeout 20m --cache-dir .trivycache/ --security-checks vuln \
      --format template --template "@contrib/gitlab.tpl" -o /root/gl-container-scanning-report.json \
      iqbberlin/testcenter-frontend:$CI_COMMIT_TAG
    - docker push iqbberlin/testcenter-frontend:$CI_COMMIT_TAG
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

build-broadcasting-service-prod:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_TAG"
  cache:
    paths:
      - .trivycache/
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make curl
    - make init
    - docker build --no-cache --target prod -t iqbberlin/testcenter-broadcasting-service:$CI_COMMIT_TAG -f broadcasting-service/Dockerfile .
    - |
      docker run --rm \
      -v /.trivycache/:/.trivycache/ -v /builds/iqb/testcenter/:/root/ -v /var/run/docker.sock:/var/run/docker.sock \
      ${TRIVY_IMAGE} image --exit-code 0 -q --timeout 20m --cache-dir .trivycache/ --security-checks vuln \
      --format template --template "@contrib/gitlab.tpl" -o /root/gl-container-scanning-report.json \
      iqbberlin/testcenter-broadcasting-service:$CI_COMMIT_TAG
    - docker push iqbberlin/testcenter-broadcasting-service:$CI_COMMIT_TAG
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

build-file-service-prod:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_TAG"
  cache:
    paths:
      - .trivycache/
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - apk add make curl
    - make init
    - docker build --no-cache -t iqbberlin/testcenter-file-service:$CI_COMMIT_TAG -f file-service/Dockerfile .
    - |
      docker run --rm \
      -v /.trivycache/:/.trivycache/ -v /builds/iqb/testcenter/:/root/ -v /var/run/docker.sock:/var/run/docker.sock \
      ${TRIVY_IMAGE} image --exit-code 0 -q --timeout 20m --cache-dir .trivycache/ --security-checks vuln \
      --format template --template "@contrib/gitlab.tpl" -o /root/gl-container-scanning-report.json \
      iqbberlin/testcenter-file-service:$CI_COMMIT_TAG
    - docker push iqbberlin/testcenter-file-service:$CI_COMMIT_TAG
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
