{{- if .Values.config.backend.fileServiceEnabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: file-server-nginx-config
data:
  REDIS_HOST: {{ .Release.Name }}-cache-service.tc.svc.cluster.local
  config.nginx.conf: |
    load_module modules/ndk_http_module.so;
    load_module modules/ngx_http_lua_module.so;

    env REDIS_HOST;
    env REDIS_PORT;
    env REDIS_PASSWORD;
    env REDIS_CACHE_FILES;

    worker_processes auto; # The special value auto allows binding worker processes automatically to available CPUs
    worker_cpu_affinity auto; # The optional mask parameter can be used to limit the CPUs available for automatic binding

    pid /tmp/nginx.pid; # store pid in /tmp because rootless users cannot access the default folders like /var/run or /run

    events {
      # assuming 1 core for each worker process, setting worker_connections to 1024 implies that Nginx can serve 1024 clients/second.
      worker_connections 1024;
    }

    http {
      # enable access to these paths in /tmp, as non-root cannot access default folders
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      access_log /dev/null;
      error_log /dev/stdout;

      tcp_nodelay on; # default = on. off can: help improve network efficiency and reduce congestion, but can introduce some latency
      keepalive_timeout 65;

      server_name_in_redirect off;

      charset utf-8;
      source_charset utf-8;
      include mime.types;
      gzip on;

      resolver kube-dns.kube-system.svc.cluster.local;

      lua_code_cache on;
      lua_shared_dict dns_cache 12k;
      lua_package_path "/usr/share/nginx/auth/?.lua;;";

      map $http_testmode $root {
        default /var/www/html;
        integration /var/www/data-TEST;
      }

      server {
        server_tokens off; # removes the nginx version at least (removing the server-header at all is very difficult)
        listen 8080;
        listen [::]:8080;

        location / {
          root $root;
          include /etc/nginx/conf.d/cors.conf; # must be overriden in e2e/headless-context and in future maybe others too
          internal; # forbids direct access to the files without token
        }

        location /file {
          set $file_path '';
          access_by_lua_file auth/auth.lua;
          content_by_lua_file auth/content.lua;
        }

        location /health {
          access_log off;
          add_header 'Content-Type' 'text/plain';
          return 200 "healthy\n";
        }

        error_page 404 /404;
        error_page 403 /403;
        error_page 500 /500;

        location = /404 {
          internal;
          return 404 'File-Service: File or Endpoint not found.';
        }

        location = /403 {
          internal;
          return 404 'File-Service: Forbidden.';
        }

        location = /500 {
          internal;
          return 404 'File-Service: Server Error.';
        }
      }
    }
{{- end }}
