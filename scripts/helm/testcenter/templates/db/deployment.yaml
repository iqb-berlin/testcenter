apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-db-pod
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/db/secret.yaml") . | sha256sum }}
      labels:
        app: {{ .Release.Name }}-db-pod
    spec:
      {{- if .Values.deployment.db.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- .Values.deployment.db.topologySpreadConstraints | toYaml | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 3000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ .Release.Name }}-db-container
          image: "{{ .Values.image.db.registryPath }}mysql:{{ .Values.image.db.tag }}"
          imagePullPolicy: {{ .Values.image.db.imagePullPolicy }}
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          {{- if .Values.deployment.db.resources }}
          resources:
            {{- .Values.deployment.db.resources | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-db-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-db-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-db-secret
                  key: MYSQL_PASSWORD
            - name: MYSQL_DATABASE
              value: "iqb_tba_testcenter"
            - name: MYSQL_INITDB_SKIP_TZINFO
              value: "true"
          args: [
            "--explicit-defaults-for-timestamp=TRUE",
            "--sql-mode=PIPES_AS_CONCAT,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION",
            "--tls-version=TLSv1.2,TLSv1.3",
            "--max-connections=500",
            "--log_error_verbosity=1"
          ]
          ports:
            - name: mysql-container
              containerPort: 3306
          volumeMounts:
            - name: db-volume
              mountPath: /var/lib/mysql
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - --user=${MYSQL_USER}
                - -h
                - 127.0.0.1
                - --silent
            initialDelaySeconds: {{ .Values.deployment.db.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.db.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.db.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.deployment.db.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.deployment.db.probes.liveness.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - --user=${MYSQL_USER}
                - -h
                - 127.0.0.1
                - --silent
            periodSeconds: {{ .Values.deployment.db.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.db.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.deployment.db.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.deployment.db.probes.readiness.failureThreshold }}
      volumes:
        - name: db-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-db-pvc
