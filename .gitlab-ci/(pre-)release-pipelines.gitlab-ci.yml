
.pre-release_rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /^(?P<MAJOR>0|[1-9]\d*)\.(?P<MINOR>0|[1-9]\d*)\.(?P<PATCH>0|[1-9]\d*)-(?P<PRERELEASE>(alpha|beta|rc)(\.)?(?:[1-9]\d*)?)$/

.release_rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /^(?P<MAJOR>0|[1-9]\d*)\.(?P<MINOR>0|[1-9]\d*)\.(?P<PATCH>0|[1-9]\d*)$/


check-pre-release-rules:
  stage: .pre
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .pre-release_rules, rules ]
  before_script:
    - PRERELEASE_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((alpha|beta|rc)(\.)?([1-9][0-9]*)?))?$"
  script:
    - echo $PRERELEASE_REGEX
    - if [[ $CI_COMMIT_TAG =~ $PRERELEASE_REGEX ]];
      then echo "$CI_COMMIT_TAG is a valid pre-release tag.";
      else echo "$CI_COMMIT_TAG is not a valid pre-release tag!"; fi

check-release-rules:
  stage: .pre
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .release_rules, rules ]
  before_script:
    - RELEASE_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$"
  script:
    - echo $RELEASE_REGEX
    - if [[ $CI_COMMIT_TAG =~ $RELEASE_REGEX ]];
      then echo "$CI_COMMIT_TAG is a valid release tag.";
      else echo "$CI_COMMIT_TAG is not a valid release tag!"; fi


push-pre-release:
  stage: deploy
  rules:
    - !reference [ .pre-release_rules, rules ]
  variables:
    BACKEND_IMAGE_NAME: "iqbberlin/testcenter-backend"
    FRONTEND_IMAGE_NAME: "iqbberlin/testcenter-frontend"
    BROADCASTING_SERVICE_IMAGE_NAME: "iqbberlin/testcenter-broadcasting-service"
    FILE_SERVICE_IMAGE_NAME: "iqbberlin/testcenter-file-service"
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USER --password-stdin
    - docker pull -q ${CI_REGISTRY_IMAGE}/${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}
  script:
    - docker tag ${CI_REGISTRY_IMAGE}/${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA} ${BACKEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA} ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA} ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA} ${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
  after_script:
    - docker logout


build-docs-backend:
  stage: build
  rules:
    - !reference [ .release_rules, rules ]
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-backend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login
        --username $CI_DEPENDENCY_PROXY_USER --password $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY
  script:
    - docker build
          --progress plain
          --pull
          --target dev
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${BACKEND_IMAGE_NAME}:dev
          --file backend/Dockerfile
          --tag ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
          --tag ${BACKEND_IMAGE_NAME}:dev
        .
    - docker push --quiet --all-tags ${BACKEND_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

build-docs-frontend:
  stage: build
  rules:
    - !reference [ .release_rules, rules ]
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-frontend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - cp frontend/src/environments/environment.dev.ts frontend/src/environments/environment.ts
    - docker login
        --username $CI_DEPENDENCY_PROXY_USER --password $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY
  script:
    - docker build
          --progress plain
          --pull
          --target dev
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${FRONTEND_IMAGE_NAME}:dev
          --file frontend/Dockerfile
          --tag ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
          --tag ${FRONTEND_IMAGE_NAME}:dev
        .
    - docker push --quiet --all-tags ${FRONTEND_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

build-docs-broadcasting-service:
  stage: build
  rules:
    - !reference [ .release_rules, rules ]
  variables:
    BROADCASTING_SERVICE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-broadcasting-service"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login
        --username $CI_DEPENDENCY_PROXY_USER --password $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY
  script:
    - docker build
          --progress plain
          --pull
          --target dev
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${BROADCASTING_SERVICE_IMAGE_NAME}:dev
          --file broadcasting-service/Dockerfile
          --tag ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
          --tag ${BROADCASTING_SERVICE_IMAGE_NAME}:dev
        .
    - docker push --quiet --all-tags ${BROADCASTING_SERVICE_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

build-docs-task-runner:
  stage: build
  rules:
    - !reference [ .release_rules, rules ]
  variables:
    TASK_RUNNER_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/task-runner"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login
        --username $CI_DEPENDENCY_PROXY_USER --password $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$REGISTRY_PASSWORD" | docker login --username $REGISTRY_USER --password-stdin $REGISTRY
  script:
    - docker build
          --progress plain
          --pull
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${TASK_RUNNER_IMAGE_NAME}:latest
          --file task-runner/Dockerfile
          --tag ${TASK_RUNNER_IMAGE_NAME}:${CI_COMMIT_SHA}
          --tag ${TASK_RUNNER_IMAGE_NAME}:latest
        .
    - docker push --quiet --all-tags ${TASK_RUNNER_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

generate-docs:
  stage: build
  rules:
    - !reference [ .release_rules, rules ]
  needs:
    - build-docs-task-runner
  before_script:
    - cp docker/default.env docker/.env
#    - cp frontend/src/environments/environment.dev.ts frontend/src/environments/environment.ts
#    - chmod 0755 scripts/database/000-create-test-db.sh
#    - mkdir -m 777 -p docs/dist
#    - mkdir -m 777 -p data
    - docker pull --quiet ${TASK_RUNNER_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker tag ${TASK_RUNNER_IMAGE_NAME}:${CI_COMMIT_SHA} docker-testcenter-task-runner
  script:
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run --rm --no-deps testcenter-task-runner
          npm run frontend:update-compodoc
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run --rm --no-deps testcenter-task-runner
          npm run broadcasting-service:update-compodoc
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run --rm --no-deps testcenter-task-runner
          npm run backend:update-specs
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run --rm --no-deps testcenter-task-runner
          npm run create-docs
  artifacts:
    paths:
      - docs/index.md
      - docs/pages/booklet-config.md
      - docs/pages/test-mode.md
      - docs/dist/api/index.html
      - docs/dist/api/specs.yml
      - docs/dist/custom-texts.md
      - docs/dist/test-session-super-states.html
      - docs/dist/compodoc-frontend/*
      - docs/dist/compodoc-broadcasting-service/*
    expire_in: 30 minutes

test-docs-backend-unit:
  stage: test
  rules:
    - !reference [ .release_rules, rules ]
  needs:
    - build-docs-backend
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-backend"
  before_script:
    - cp docker/default.env docker/.env
    - chmod 0755 scripts/database/000-create-test-db.sh
    - docker pull --quiet ${DOCKERHUB_PROXY}mysql:8.0
    - docker pull --quiet ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
    - docker tag ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev iqbberlin/testcenter-backend:current
  script:
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run --rm --entrypoint "" testcenter-backend
          php
            -dxdebug.mode='coverage' /var/www/testcenter/backend/vendor/phpunit/phpunit/phpunit
            --bootstrap /var/www/testcenter/backend/test/unit/bootstrap.php
            --configuration /var/www/testcenter/backend/phpunit.xml
            --coverage-html /docs/dist/test-coverage-backend-unit /var/www/testcenter/backend/test/unit/
            --testdox
  artifacts:
    paths:
      - docs/dist/test-coverage-backend-unit/*
    expire_in: 30 minutes

test-docs-frontend-unit:
  stage: test
  rules:
    - !reference [ .release_rules, rules ]
  needs:
    - build-docs-frontend
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-frontend"
  before_script:
    - cp docker/default.env docker/.env
    - cp frontend/src/environments/environment.dev.ts frontend/src/environments/environment.ts
    - docker pull --quiet ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
    - docker tag ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_dev iqbberlin/testcenter-frontend:current
  script:
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run testcenter-frontend npx ng test --watch=false --code-coverage
  artifacts:
    paths:
      - docs/dist/test-coverage-frontend-unit/*
    expire_in: 30 minutes

test-docs-broadcasting-service-unit:
  stage: test
  rules:
    - !reference [ .release_rules, rules ]
  needs:
    - build-docs-broadcasting-service
  variables:
    BROADCASTING_SERVICE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/testcenter-broadcasting-service"
  before_script:
    - cp docker/default.env docker/.env
    - docker pull --quiet ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}_dev
    - docker tag
        ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}_dev iqbberlin/testcenter-broadcasting-service:current
  script:
    - docker compose
          --file docker/docker-compose.yml
          --file docker/docker-compose.dev.yml
        run testcenter-broadcasting-service npx jest --coverage
  artifacts:
    paths:
      - docs/dist/test-coverage-broadcasting-service-unit/*
    expire_in: 30 minutes

pages:
  stage: deploy
  rules:
    - !reference [ .release_rules, rules ]
  needs:
    - test-docs-backend-unit
    - test-docs-frontend-unit
    - test-docs-broadcasting-service-unit
    - generate-docs
  image: ${PAGES_IMAGE}
  script:
#    - mkdir public
#    - cd docs
#    - gem install bundler
#    - bundle install
#    - jekyll build -d ../public
    - echo "Hooooooooraaaaay!!!!!!!"
  artifacts:
    paths:
      - public

push-release:
  stage: deploy
  rules:
    - !reference [ .release_rules, rules ]
  variables:
    BACKEND_IMAGE_NAME: "iqbberlin/testcenter-backend"
    FRONTEND_IMAGE_NAME: "iqbberlin/testcenter-frontend"
    BROADCASTING_SERVICE_IMAGE_NAME: "iqbberlin/testcenter-broadcasting-service"
    FILE_SERVICE_IMAGE_NAME: "iqbberlin/testcenter-file-service"
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USER --password-stdin
    - docker pull -q ${CI_REGISTRY_IMAGE}/${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${CI_REGISTRY_IMAGE}/${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA}
  script:
    - docker tag ${CI_REGISTRY_IMAGE}/${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA} ${BACKEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA} ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA} ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_SHA} ${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${BROADCASTING_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push -q ${FILE_SERVICE_IMAGE_NAME}:${CI_COMMIT_TAG}
  after_script:
    - docker logout
